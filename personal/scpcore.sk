# ------------------------------------------------------------------
#
#                    SCP Core | Made by Greenlio
#
#                Copyright Greenlio (c) 2022-current
#
# ------------------------------------------------------------------


# ------------------------------------------------------------------
#                               Key Cards
# ------------------------------------------------------------------

# NBT Method inspired by Dadrien

function getCardLevel(t: text, p: player) :: integer:
	if {_t} is "FP":
		set {_item} to nbt compound of {_p}'s held item
		set {_fp} to tag "tag;levelFP" of {_item}
		return {_fp} parsed as an integer
	if {_t} is "CI":
		set {_item} to nbt compound of {_p}'s held item
		set {_ci} to tag "tag;levelCI" of {_item}
		return {_ci} parsed as an integer
	# Leaves room for further customization. :)

function buttonDenied(p: player, level: integer):
	send action bar "&cAccess Denied! &7(Level %{_level}%&7+)" to {_p}
	play sound "block.note_block.bit" with pitch 0.3 at {_p}

function ciButtonDenied(p: player, level: integer):
	send action bar "&cAccess Denied! &7(CI Level %{_level}%&7+)" to {_p}
	play sound "block.note_block.bit" with pitch 0.3 at {_p}

on right click on any button:
	if player's gamemode is not creative: # Perhaps adventure? Anyways, spectators cant right click buttons.. right?
		if {~cardcooldown::%player's uuid%} is set:
			if difference between {~cardcooldown::%player's uuid%} and now >= 0.75 seconds: # using sk feature not many know, its quite swag.
				set {~cardcooldown::%player's uuid%} to now 
				set {_fp} to getCardLevel("FP", player)
				set {_ci} to getCardLevel("CI", player)
				# FP / Main Buttons
				if event-block is birch button:
					if {_fp} < 1:
						buttonDenied(player, 1)
						cancel event
				else if event-block is oak button:
					if {_fp} < 2:
						buttonDenied(player, 2)
						cancel event
				else if event-block is jungle button:
					if {_fp} < 3:
						buttonDenied(player, 3)
						cancel event
				else if event-block is spruce button:
					if {_fp} < 4:
						buttonDenied(player, 4)
						cancel event
				else if event-block is dark oak button:
					if {_fp} < 5:
						buttonDenied(player, 5)
						cancel event
				else if event-block is crimson button:
					if {_fp} < 6:
						buttonDenied(player, 6)
						cancel event
				# CI Buttons
				else if event-block is stone button:
					if {_ci} < 1:
						ciButtonDenied(player, 1)
						cancel event
				else if event-block is polished blackstone button:
					if {_ci} < 2:
						ciButtonDenied(player, 2)
						cancel event
				# room for more is open


				if event is not cancelled:
					send action bar "&aAccess Granted!" to player
					play sound "block.note_block.bit" with pitch 3 at player

# Turned into function with advice from budgo and HaahL

function giveCard(type: text, p: player):
	if {_type} is "omni":
		set {_nbt} to nbt compound from "{levelFP:10,levelCI:10}"
		give {_p} blue stained glass pane of curse of vanishing 1 named "&8OMNI-card" with nbt {_nbt}
	else if {_type} is "maxfp":
		set {_nbt} to nbt compound from "{levelFP:10}"
		give {_p} purple stained glass pane of curse of vanishing 1 named "&8OMNI-FP-card" with nbt {_nbt}
	else if {_type} is "maxci":
		set {_nbt} to nbt compound from "{levelCI:10}"
		give {_p} cyan stained glass pane of curse of vanishing 1 named "&8OMNI-CI-card" with nbt {_nbt}
	# Normal / FP Cards
	else if {_type} is "l6":
		set {_nbt} to nbt compound from "{levelFP:6}"
		give {_p} black stained glass pane named "&8L6-card" with nbt {_nbt}
	else if {_type} is "l5":
		set {_nbt} to nbt compound from "{levelFP:5}"
		give {_p} red stained glass pane named "&8L5-card" with nbt {_nbt}
	else if {_type} is "l4":
		set {_nbt} to nbt compound from "{levelFP:4}"
		give {_p} green stained glass pane named "&8L4-card" with nbt {_nbt}
	else if {_type} is "l3":
		set {_nbt} to nbt compound from "{levelFP:3}"
		give {_p} light gray stained glass pane named "&8L3-card" with nbt {_nbt}
	else if {_type} is "l2":
		set {_nbt} to nbt compound from "{levelFP:2}"
		give {_p} gray stained glass pane named "&8L2-card" with nbt {_nbt}
	else if {_type} is "l1":
		set {_nbt} to nbt compound from "{levelFP:1}"
		give {_p} pink stained glass pane named "&8L1-card" with nbt {_nbt}
	# CI Cards
	else if {_type} is "ci1":
		set {_nbt} to nbt compound from "{levelCI:1}"
		give {_p} lime stained glass pane named "&8CI1-card" with nbt {_nbt}
	else if {_type} is "ci2":
		set {_nbt} to nbt compound from "{levelCI:2}"
		give {_p} yellow stained glass pane named "&8CI2-card" with nbt {_nbt}
	else:
		send action bar "&cInvalid Card!" to {_p}
		play sound "block.note_block.bit" with pitch 0.3 at {_p}


command /getCard [<text>]:
	permission: scpcore.getCard
	permission message: &3[SCP] &7No Permission.
	trigger:
		giveCard(arg-1, command sender)

# ------------------------------------------------------------------
#                             Radio
# ------------------------------------------------------------------

command /radio [<string>]:
	permission: scpcore.radio
	trigger:
		arg-1 is set
		send "&2[Radio] %player's prefix% %player%&f: &7%args%" to all players where [player has permission "scpcore.radio"]

# To replicate - copy the command, change permissions to scpcore.radio, change prefix to command, and boom.

# ------------------------------------------------------------------
#			     Combat Tag
# ------------------------------------------------------------------

# I don't really like this, but it's the best I can do on a personal level. Sorry.

on damage:
    if attacker is player:
        if {~combattag::%attacker%} is not set:
            set {~combattag::%attacker%} to true
            set {~timeleft::%attacker%} to 10
            while {~combattag::%attacker%} is set:
                send action bar "&cYou are currently in combat for &4%{~timeleft::%attacker%}% &4seconds&c." to attacker
                wait 1 seconds
                subtract 1 from {~timeleft::%attacker%}
                if {~timeleft::%attacker%} is 0:
                    send action bar "&aYou are no longer in combat." to attacker
                    delete {~combattag::%attacker%}
                    delete {~timeleft::%attacker%}
                    stop
        set {~timeleft::%attacker%} to 10
    if victim is player:
        if {~combattag::%victim%} is not set:
            set {~combattag::%victim%} to true
            set {~timeleft::%victim%} to 10
            while {~combattag::%victim%} is set:
                send action bar "&cYou are currently in combat for &4%{~timeleft::%victim%}% &4seconds&c." to victim
                wait 1 seconds
                subtract 1 from {~timeleft::%victim%}
                if {~timeleft::%victim%} is 0:
                    send action bar "&aYou are no longer in combat." to victim
                    delete {~combattag::%victim%}
                    delete {~timeleft::%victim%}
                    stop
            set {~timeleft::%victim%} to 10

on death:
    if victim is player:
        if {~combattag::%victim%} is set:
            send action bar "&aYou are no longer in combat." to victim
            delete {~combattag::%victim%}
            delete {~timeleft::%victim%}
            stop

on quit:
    if {~combattag::%player%} is set:
        kill player
        delete {~combattag::%player%}
        set {~combatlog.done::%player%} to true

on join:
    if {~combatlog.done::%player%} is set:
        delete {~combatlog.done::%player%}
        wait 2 seconds
        send action bar "&cYou died because you logged out during combat." to player

on teleport:
    if {~combattag::%player%} is set:
        cancel event
        send action bar "&cYou can't teleport during combat." to player
		
